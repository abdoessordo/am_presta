
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 2.272 ms
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 49.136 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 4.675 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 13.194 ms
POST /api/dashboard/soccollab 200 1376 - 6.862 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 31.769 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 9.197 ms
POST /api/dashboard/soccards 200 11 - 5.086 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.215 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 2.427 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 16:42:02 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 5.645 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.395 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.422 ms
GET /api/media/1661860075252dog.png 304 - - 0.282 ms
GET /api/null 404 147 - 0.466 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.564 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.323 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Departement"."id", "Departement"."nom", "Departement"."ssss", "Departement"."createdAt", "Departement"."updatedAt", "Departement"."deletedAt", "Departement"."SocieteId", count("Collaborateurs"."id") AS "collab_count", count("Collaborateurs->Session_Collabs->certifs"."id") AS "challenge_count" FROM "Departements" AS "Departement" LEFT OUTER JOIN "Collaborateurs" AS "Collaborateurs" ON "Departement"."id" = "Collaborateurs"."DepartementId" AND ("Collaborateurs"."deletedAt" IS NULL) LEFT OUTER JOIN "Session_Collabs" AS "Collaborateurs->Session_Collabs" ON "Collaborateurs"."id" = "Collaborateurs->Session_Collabs"."CollaborateurId" AND ("Collaborateurs->Session_Collabs"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Collaborateurs->Session_Collabs->certifs" ON "Collaborateurs->Session_Collabs"."certifsId" = "Collaborateurs->Session_Collabs->certifs"."id" AND "Collaborateurs->Session_Collabs->certifs"."status" = 'accepted' WHERE ("Departement"."deletedAt" IS NULL AND "Departement"."SocieteId" = 8) GROUP BY "Departement"."id";
POST /api/notifs/browsesoc 200 2 - 84.556 ms
GET /api/societe/browsedepts 304 - - 79.337 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Cours"."id", "Cours"."nom", "Cours"."description", "Cours"."image", "Cours"."createdAt", "Cours"."updatedAt", "Cours"."deletedAt", "Cours"."ProviderId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider->Quota"."id" AS "Provider.Quota.id", "Provider->Quota"."quota" AS "Provider.Quota.quota", "Provider->Quota"."createdAt" AS "Provider.Quota.createdAt", "Provider->Quota"."updatedAt" AS "Provider.Quota.updatedAt", "Provider->Quota"."deletedAt" AS "Provider.Quota.deletedAt", "Provider->Quota"."SocieteId" AS "Provider.Quota.SocieteId", "Provider->Quota"."ProviderId" AS "Provider.Quota.ProviderId" FROM "Cours" AS "Cours" INNER JOIN "Providers" AS "Provider" ON "Cours"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Quota" AS "Provider->Quota" ON "Provider"."id" = "Provider->Quota"."ProviderId" AND ("Provider->Quota"."deletedAt" IS NULL AND "Provider->Quota"."SocieteId" = 8) WHERE ("Cours"."deletedAt" IS NULL);
GET /api/cours/browsesoc 304 - - 5.112 ms
POST /api/notifs/browsesoc 200 2 - 19.967 ms
Executing (default): SELECT "Provider"."id", "Provider"."nom", "Provider"."image", "Provider"."createdAt", "Provider"."updatedAt", "Provider"."deletedAt", count("Cours"."id") AS "course_num" FROM "Providers" AS "Provider" LEFT OUTER JOIN "Cours" AS "Cours" ON "Provider"."id" = "Cours"."ProviderId" AND ("Cours"."deletedAt" IS NULL) WHERE ("Provider"."deletedAt" IS NULL) GROUP BY "Provider"."id";
GET /api/provider/browse 304 - - 2.805 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.328 ms
GET /api/media/1661560854866Cloud-Infrastructure.jpeg 304 - - 0.318 ms
GET /api/media/1661561070151Design%20Thinking.jpeg 304 - - 0.303 ms
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.265 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Request"."id", "Request"."status", "Request"."createdAt", "Request"."updatedAt", "Request"."deletedAt", "Request"."CollaborateurId", "Request"."CourId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Collaborateur"."id" AS "Collaborateur.id", "Collaborateur"."nom" AS "Collaborateur.nom", "Collaborateur"."prenom" AS "Collaborateur.prenom", "Collaborateur"."image" AS "Collaborateur.image", "Collaborateur"."email_institu" AS "Collaborateur.email_institu", "Collaborateur"."admin" AS "Collaborateur.admin", "Collaborateur"."instructor" AS "Collaborateur.instructor", "Collaborateur"."changedpass" AS "Collaborateur.changedpass", "Collaborateur"."createdAt" AS "Collaborateur.createdAt", "Collaborateur"."updatedAt" AS "Collaborateur.updatedAt", "Collaborateur"."deletedAt" AS "Collaborateur.deletedAt", "Collaborateur"."DepartementId" AS "Collaborateur.DepartementId", "Collaborateur"."SocieteId" AS "Collaborateur.SocieteId", "Collaborateur"."UserId" AS "Collaborateur.UserId" FROM "Requests" AS "Request" INNER JOIN "Cours" AS "Cour" ON "Request"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Collaborateur" ON "Request"."CollaborateurId" = "Collaborateur"."id" AND ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) WHERE ("Request"."deletedAt" IS NULL AND "Request"."status" = 'pending');
POST /api/notifs/browsesoc 200 2 - 16.998 ms
GET /api/societe/browserequests 304 - - 10.157 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.535 ms
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Cour"."description" AS "Cour.description", "Cour"."image" AS "Cour.image", "Cour"."createdAt" AS "Cour.createdAt", "Cour"."updatedAt" AS "Cour.updatedAt", "Cour"."deletedAt" AS "Cour.deletedAt", "Cour"."ProviderId" AS "Cour.ProviderId", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom", "Cour->Provider"."image" AS "Cour.Provider.image", "Cour->Provider"."createdAt" AS "Cour.Provider.createdAt", "Cour->Provider"."updatedAt" AS "Cour.Provider.updatedAt", "Cour->Provider"."deletedAt" AS "Cour.Provider.deletedAt" FROM "Sessions" AS "Session" INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL AND "Cour"."id" = 5) LEFT OUTER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/session/browsesoc 200 928 - 4.932 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.565 ms
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Cour"."description" AS "Cour.description", "Cour"."image" AS "Cour.image", "Cour"."createdAt" AS "Cour.createdAt", "Cour"."updatedAt" AS "Cour.updatedAt", "Cour"."deletedAt" AS "Cour.deletedAt", "Cour"."ProviderId" AS "Cour.ProviderId", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom", "Cour->Provider"."image" AS "Cour.Provider.image", "Cour->Provider"."createdAt" AS "Cour.Provider.createdAt", "Cour->Provider"."updatedAt" AS "Cour.Provider.updatedAt", "Cour->Provider"."deletedAt" AS "Cour.Provider.deletedAt", "Cour->Provider->Quota"."id" AS "Cour.Provider.Quota.id", "Cour->Provider->Quota"."quota" AS "Cour.Provider.Quota.quota", "Cour->Provider->Quota"."createdAt" AS "Cour.Provider.Quota.createdAt", "Cour->Provider->Quota"."updatedAt" AS "Cour.Provider.Quota.updatedAt", "Cour->Provider->Quota"."deletedAt" AS "Cour.Provider.Quota.deletedAt", "Cour->Provider->Quota"."SocieteId" AS "Cour.Provider.Quota.SocieteId", "Cour->Provider->Quota"."ProviderId" AS "Cour.Provider.Quota.ProviderId" FROM "Sessions" AS "Session" INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) INNER JOIN "Quota" AS "Cour->Provider->Quota" ON "Cour->Provider"."id" = "Cour->Provider->Quota"."ProviderId" AND ("Cour->Provider->Quota"."deletedAt" IS NULL AND ("Cour->Provider->Quota"."SocieteId" = 8 AND "Cour->Provider->Quota"."quota" > 0)) WHERE ("Session"."deletedAt" IS NULL AND "Session"."id" = 4);
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND ("Collaborateur"."id" = 10 AND "Collaborateur"."SocieteId" = 8));
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 14);
Executing (default): SELECT "id", "status", "createdAt", "updatedAt", "deletedAt", "SessionId", "CollaborateurId", "ProofId", "certifsId", "fincourseId" FROM "Session_Collabs" AS "Session_Collab" WHERE ("Session_Collab"."deletedAt" IS NULL AND ("Session_Collab"."SessionId" = 4 AND "Session_Collab"."CollaborateurId" IN (10)));
Executing (default): SELECT "id", "nom", "datedebut", "datefin", "statut", "createdAt", "updatedAt", "deletedAt", "CourId", "SocieteId" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."id" = 4);
Executing (default): UPDATE "Quota" SET "quota"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): SELECT "Cours".* FROM (SELECT "Cours"."id", "Cours"."nom" FROM "Cours" AS "Cours" WHERE ("Cours"."deletedAt" IS NULL) AND ( SELECT "CourId" FROM "Sessions" AS "Sessions" WHERE (("Sessions"."deletedAt" IS NULL AND "Sessions"."id" = 4) AND "Sessions"."CourId" = "Cours"."id") LIMIT 1 ) IS NOT NULL LIMIT 1) AS "Cours" INNER JOIN "Sessions" AS "Sessions" ON "Cours"."id" = "Sessions"."CourId" AND ("Sessions"."deletedAt" IS NULL AND "Sessions"."id" = 4);
Executing (default): SELECT "id", "status", "createdAt", "updatedAt", "deletedAt", "CollaborateurId", "CourId" FROM "Requests" AS "Request" WHERE ("Request"."deletedAt" IS NULL AND ("Request"."CourId" = 5 AND "Request"."CollaborateurId" = 10)) LIMIT 1;
Executing (default): UPDATE "Requests" SET "status"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."id" = 10);
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND ("Collaborateur"."SocieteId" = 8 AND "Collaborateur"."admin" = true)) LIMIT 1;
Executing (default): SELECT "entity_type_id" FROM "Notifications_Entities" AS "Notifications_Entity" WHERE ("Notifications_Entity"."deletedAt" IS NULL AND "Notifications_Entity"."description" = 'has accepted your request to enroll') LIMIT 1;
Executing (default): INSERT INTO "Notification_changes" ("id","createdAt","updatedAt","emeteurId","recepteurId") VALUES (DEFAULT,$1,$2,$3,$4) RETURNING "id","createdAt","updatedAt","deletedAt","emeteurId","recepteurId";
Executing (default): INSERT INTO "Notifications_objects" ("id","read","createdAt","updatedAt","NotificationChangeId","NotificationsEntityEntityTypeId","RequestId") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING "id","read","createdAt","updatedAt","deletedAt","NotificationChangeId","NotificationsEntityEntityTypeId","ProofId","VoucherId","RequestId","SessionId","ProviderId";
POST /api/collab/addsession 200 36 - 84.375 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", count("Session_Collabs->Collaborateur"."id") AS "collabs", count("Session_Collabs->certifs"."id") AS "collabs_fin", "Cour"."id" AS "Cour.id", "Cour"."image" AS "Cour.image", "Cour"."nom" AS "Cour.nom", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom" FROM "Sessions" AS "Session" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" LEFT OUTER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' INNER JOIN "Collaborateurs" AS "Session_Collabs->Collaborateur" ON "Session_Collabs"."CollaborateurId" = "Session_Collabs->Collaborateur"."id" AND ("Session_Collabs->Collaborateur"."deletedAt" IS NULL AND ("Session_Collabs->Collaborateur"."admin" = false AND "Session_Collabs->Collaborateur"."instructor" = false)) ) ON "Session"."id" = "Session_Collabs"."SessionId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8) GROUP BY "Session"."id", "Cour"."id", "Cour->Provider"."id";
POST /api/notifs/browsesoc 200 2 - 15.891 ms
GET /api/session/browse 304 - - 8.306 ms
Executing (default): SELECT "Provider"."id", "Provider"."nom", "Provider"."image", "Provider"."createdAt", "Provider"."updatedAt", "Provider"."deletedAt", count("Cours"."id") AS "course_num" FROM "Providers" AS "Provider" LEFT OUTER JOIN "Cours" AS "Cours" ON "Provider"."id" = "Cours"."ProviderId" AND ("Cours"."deletedAt" IS NULL) WHERE ("Provider"."deletedAt" IS NULL) GROUP BY "Provider"."id";
GET /api/provider/browse 304 - - 2.521 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
POST /api/notifs/browsesoc 200 2 - 8.021 ms
Executing (default): SELECT "Request"."id", "Request"."status", "Request"."createdAt", "Request"."updatedAt", "Request"."deletedAt", "Request"."CollaborateurId", "Request"."CourId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Collaborateur"."id" AS "Collaborateur.id", "Collaborateur"."nom" AS "Collaborateur.nom", "Collaborateur"."prenom" AS "Collaborateur.prenom", "Collaborateur"."image" AS "Collaborateur.image", "Collaborateur"."email_institu" AS "Collaborateur.email_institu", "Collaborateur"."admin" AS "Collaborateur.admin", "Collaborateur"."instructor" AS "Collaborateur.instructor", "Collaborateur"."changedpass" AS "Collaborateur.changedpass", "Collaborateur"."createdAt" AS "Collaborateur.createdAt", "Collaborateur"."updatedAt" AS "Collaborateur.updatedAt", "Collaborateur"."deletedAt" AS "Collaborateur.deletedAt", "Collaborateur"."DepartementId" AS "Collaborateur.DepartementId", "Collaborateur"."SocieteId" AS "Collaborateur.SocieteId", "Collaborateur"."UserId" AS "Collaborateur.UserId" FROM "Requests" AS "Request" INNER JOIN "Cours" AS "Cour" ON "Request"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Collaborateur" ON "Request"."CollaborateurId" = "Collaborateur"."id" AND ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) WHERE ("Request"."deletedAt" IS NULL AND "Request"."status" = 'pending');
GET /api/societe/browserequests 200 1113 - 4.214 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.520 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.714 ms
Executing (default): SELECT "id", "status", "createdAt", "updatedAt", "deletedAt", "CollaborateurId", "CourId" FROM "Requests" AS "Request" WHERE ("Request"."deletedAt" IS NULL AND "Request"."id" = 8);
Executing (default): UPDATE "Requests" SET "status"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."id" = 13);
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND ("Collaborateur"."SocieteId" = 8 AND "Collaborateur"."admin" = true)) LIMIT 1;
Executing (default): SELECT "entity_type_id" FROM "Notifications_Entities" AS "Notifications_Entity" WHERE ("Notifications_Entity"."deletedAt" IS NULL AND "Notifications_Entity"."description" = 'has rejected your request to enroll') LIMIT 1;
Executing (default): INSERT INTO "Notification_changes" ("id","createdAt","updatedAt","emeteurId","recepteurId") VALUES (DEFAULT,$1,$2,$3,$4) RETURNING "id","createdAt","updatedAt","deletedAt","emeteurId","recepteurId";
Executing (default): INSERT INTO "Notifications_objects" ("id","read","createdAt","updatedAt","NotificationChangeId","NotificationsEntityEntityTypeId","RequestId") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING "id","read","createdAt","updatedAt","deletedAt","NotificationChangeId","NotificationsEntityEntityTypeId","ProofId","VoucherId","RequestId","SessionId","ProviderId";
Executing (default): SELECT "Cours".* FROM (SELECT "Cours"."id", "Cours"."nom" FROM "Cours" AS "Cours" WHERE ("Cours"."deletedAt" IS NULL) AND ( SELECT "CourId" FROM "Requests" AS "Requests" WHERE (("Requests"."deletedAt" IS NULL AND "Requests"."id" = 8) AND "Requests"."CourId" = "Cours"."id") LIMIT 1 ) IS NOT NULL LIMIT 1) AS "Cours" INNER JOIN "Requests" AS "Requests" ON "Cours"."id" = "Requests"."CourId" AND ("Requests"."deletedAt" IS NULL AND "Requests"."id" = 8);
Executing (default): SELECT email
    FROM "Users" u
    JOIN "Collaborateurs" c ON u.id = c."UserId"
    JOIN "Requests" r ON c.id = r."CollaborateurId"
    WHERE r.id = 8
POST /api/collab/refuse 200 31 - 86.119 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.671 ms
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
Executing (default): CREATE EXTENSION IF NOT EXISTS pg_trgm
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Societes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Societes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Societes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "name" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Societes"  ADD UNIQUE ("name");ALTER TABLE "Societes" ALTER COLUMN "name" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Societes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Departements'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Departements' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Departements' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "ssss" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" DROP CONSTRAINT "Departements_SocieteId_fkey"
Executing (default): ALTER TABLE "Departements"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Departements' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Users" ALTER COLUMN "username" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "username" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("username");ALTER TABLE "Users" ALTER COLUMN "username" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "password" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "password" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "password" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Users" ALTER COLUMN "email" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("email");ALTER TABLE "Users" ALTER COLUMN "email" TYPE VARCHAR(255) ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Collaborateurs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Collaborateurs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Collaborateurs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" SET DEFAULT false;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_DepartementId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("DepartementId") REFERENCES "Departements" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_SocieteId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_UserId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Collaborateurs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Providers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Providers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Providers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Providers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Cours'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Cours' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Cours' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "description" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" DROP CONSTRAINT "Cours_ProviderId_fkey"
Executing (default): ALTER TABLE "Cours"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Cours' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Requests'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Requests' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Requests' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Requests" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CourId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Requests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Sessions'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Sessions' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Sessions' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_CourId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_SocieteId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Sessions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Proofs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Proofs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Proofs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Proofs" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "file" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "file" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "file" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "name" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "name" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "size" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "size" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "size" TYPE INTEGER;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Proofs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Session_Collabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Session_Collabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Session_Collabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET DEFAULT 0;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" TYPE INTEGER;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_SessionId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_ProofId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_certifsId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_fincourseId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("certifsId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("fincourseId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Session_Collabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Vouchers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Vouchers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Vouchers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "code" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SessionCollabId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SessionCollabId") REFERENCES "Session_Collabs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_ProviderId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SocieteId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Vouchers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenges'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenges' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenges' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "prix" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "prix" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "prix" TYPE INTEGER;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" DROP CONSTRAINT "Challenges_SocieteId_fkey"
Executing (default): ALTER TABLE "Challenges"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenges' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeCollabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeCollabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeCollabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" TYPE INTEGER;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeCollabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Quota'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Quota' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Quota' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "quota" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "quota" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "quota" TYPE INTEGER;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_SocieteId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_ProviderId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Quota' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SuperAdmins'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'SuperAdmins' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'SuperAdmins' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" DROP CONSTRAINT "SuperAdmins_UserId_fkey"
Executing (default): ALTER TABLE "SuperAdmins"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SuperAdmins' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_Entities'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_Entities' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_Entities' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_Entities' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notification_changes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notification_changes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notification_changes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_emeteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_recepteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("emeteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("recepteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notification_changes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_objects'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_objects' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_objects' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "read" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" SET DEFAULT false;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationChangeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationChangeId") REFERENCES "Notification_changes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationsEntityEntityTypeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationsEntityEntityTypeId") REFERENCES "Notifications_Entities" ("entity_type_id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProofId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_VoucherId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("VoucherId") REFERENCES "Vouchers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_RequestId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("RequestId") REFERENCES "Requests" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_SessionId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProviderId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_objects' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeSession'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeSession' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeSession' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeSession' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenge_Dept'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenge_Dept' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenge_Dept' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenge_Dept' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 2.728 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 70.712 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.139 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 23.714 ms
POST /api/dashboard/soccollab 200 1376 - 10.816 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 4.556 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 14.487 ms
POST /api/dashboard/soccards 200 11 - 4.098 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 4.648 ms
POST /api/dashboard/socquota 200 100 - 4.182 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 16:44:48 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 8.818 ms
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 12.780 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.790 ms
GET /api/media/1661860075252dog.png 304 - - 0.340 ms
GET /api/null 404 147 - 1.438 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 1.465 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.353 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Cours"."id", "Cours"."nom", "Cours"."description", "Cours"."image", "Cours"."createdAt", "Cours"."updatedAt", "Cours"."deletedAt", "Cours"."ProviderId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider->Quota"."id" AS "Provider.Quota.id", "Provider->Quota"."quota" AS "Provider.Quota.quota", "Provider->Quota"."createdAt" AS "Provider.Quota.createdAt", "Provider->Quota"."updatedAt" AS "Provider.Quota.updatedAt", "Provider->Quota"."deletedAt" AS "Provider.Quota.deletedAt", "Provider->Quota"."SocieteId" AS "Provider.Quota.SocieteId", "Provider->Quota"."ProviderId" AS "Provider.Quota.ProviderId" FROM "Cours" AS "Cours" INNER JOIN "Providers" AS "Provider" ON "Cours"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Quota" AS "Provider->Quota" ON "Provider"."id" = "Provider->Quota"."ProviderId" AND ("Provider->Quota"."deletedAt" IS NULL AND "Provider->Quota"."SocieteId" = 8) WHERE ("Cours"."deletedAt" IS NULL);
POST /api/notifs/browsesoc 200 2 - 12.789 ms
GET /api/cours/browsesoc 200 2196 - 6.606 ms
Executing (default): SELECT "Provider"."id", "Provider"."nom", "Provider"."image", "Provider"."createdAt", "Provider"."updatedAt", "Provider"."deletedAt", count("Cours"."id") AS "course_num" FROM "Providers" AS "Provider" LEFT OUTER JOIN "Cours" AS "Cours" ON "Provider"."id" = "Cours"."ProviderId" AND ("Cours"."deletedAt" IS NULL) WHERE ("Provider"."deletedAt" IS NULL) GROUP BY "Provider"."id";
GET /api/provider/browse 304 - - 3.657 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.501 ms
GET /api/media/1661560854866Cloud-Infrastructure.jpeg 304 - - 0.369 ms
GET /api/media/1661561070151Design%20Thinking.jpeg 304 - - 0.464 ms
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.467 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Request"."id", "Request"."status", "Request"."createdAt", "Request"."updatedAt", "Request"."deletedAt", "Request"."CollaborateurId", "Request"."CourId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Collaborateur"."id" AS "Collaborateur.id", "Collaborateur"."nom" AS "Collaborateur.nom", "Collaborateur"."prenom" AS "Collaborateur.prenom", "Collaborateur"."image" AS "Collaborateur.image", "Collaborateur"."email_institu" AS "Collaborateur.email_institu", "Collaborateur"."admin" AS "Collaborateur.admin", "Collaborateur"."instructor" AS "Collaborateur.instructor", "Collaborateur"."changedpass" AS "Collaborateur.changedpass", "Collaborateur"."createdAt" AS "Collaborateur.createdAt", "Collaborateur"."updatedAt" AS "Collaborateur.updatedAt", "Collaborateur"."deletedAt" AS "Collaborateur.deletedAt", "Collaborateur"."DepartementId" AS "Collaborateur.DepartementId", "Collaborateur"."SocieteId" AS "Collaborateur.SocieteId", "Collaborateur"."UserId" AS "Collaborateur.UserId" FROM "Requests" AS "Request" INNER JOIN "Cours" AS "Cour" ON "Request"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Collaborateur" ON "Request"."CollaborateurId" = "Collaborateur"."id" AND ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) WHERE ("Request"."deletedAt" IS NULL AND "Request"."status" = 'pending');
POST /api/notifs/browsesoc 200 2 - 12.633 ms
GET /api/societe/browserequests 200 560 - 6.567 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.535 ms
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Cour"."description" AS "Cour.description", "Cour"."image" AS "Cour.image", "Cour"."createdAt" AS "Cour.createdAt", "Cour"."updatedAt" AS "Cour.updatedAt", "Cour"."deletedAt" AS "Cour.deletedAt", "Cour"."ProviderId" AS "Cour.ProviderId", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom", "Cour->Provider"."image" AS "Cour.Provider.image", "Cour->Provider"."createdAt" AS "Cour.Provider.createdAt", "Cour->Provider"."updatedAt" AS "Cour.Provider.updatedAt", "Cour->Provider"."deletedAt" AS "Cour.Provider.deletedAt" FROM "Sessions" AS "Session" INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL AND "Cour"."id" = 5) LEFT OUTER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/session/browsesoc 200 928 - 7.078 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.766 ms
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Cour"."description" AS "Cour.description", "Cour"."image" AS "Cour.image", "Cour"."createdAt" AS "Cour.createdAt", "Cour"."updatedAt" AS "Cour.updatedAt", "Cour"."deletedAt" AS "Cour.deletedAt", "Cour"."ProviderId" AS "Cour.ProviderId", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom", "Cour->Provider"."image" AS "Cour.Provider.image", "Cour->Provider"."createdAt" AS "Cour.Provider.createdAt", "Cour->Provider"."updatedAt" AS "Cour.Provider.updatedAt", "Cour->Provider"."deletedAt" AS "Cour.Provider.deletedAt", "Cour->Provider->Quota"."id" AS "Cour.Provider.Quota.id", "Cour->Provider->Quota"."quota" AS "Cour.Provider.Quota.quota", "Cour->Provider->Quota"."createdAt" AS "Cour.Provider.Quota.createdAt", "Cour->Provider->Quota"."updatedAt" AS "Cour.Provider.Quota.updatedAt", "Cour->Provider->Quota"."deletedAt" AS "Cour.Provider.Quota.deletedAt", "Cour->Provider->Quota"."SocieteId" AS "Cour.Provider.Quota.SocieteId", "Cour->Provider->Quota"."ProviderId" AS "Cour.Provider.Quota.ProviderId" FROM "Sessions" AS "Session" INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) INNER JOIN "Quota" AS "Cour->Provider->Quota" ON "Cour->Provider"."id" = "Cour->Provider->Quota"."ProviderId" AND ("Cour->Provider->Quota"."deletedAt" IS NULL AND ("Cour->Provider->Quota"."SocieteId" = 8 AND "Cour->Provider->Quota"."quota" > 0)) WHERE ("Session"."deletedAt" IS NULL AND "Session"."id" = 4);
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND ("Collaborateur"."id" = 13 AND "Collaborateur"."SocieteId" = 8));
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 17);
Executing (default): SELECT "id", "status", "createdAt", "updatedAt", "deletedAt", "SessionId", "CollaborateurId", "ProofId", "certifsId", "fincourseId" FROM "Session_Collabs" AS "Session_Collab" WHERE ("Session_Collab"."deletedAt" IS NULL AND ("Session_Collab"."SessionId" = 4 AND "Session_Collab"."CollaborateurId" IN (13)));
Executing (default): SELECT "id", "nom", "datedebut", "datefin", "statut", "createdAt", "updatedAt", "deletedAt", "CourId", "SocieteId" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."id" = 4);
Executing (default): UPDATE "Quota" SET "quota"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): INSERT INTO "Session_Collabs" ("id","status","createdAt","updatedAt","SessionId","CollaborateurId") VALUES (DEFAULT,0,'2022-08-30 15:45:05.295 +00:00','2022-08-30 15:45:05.295 +00:00',4,13) RETURNING "id","status","createdAt","updatedAt","deletedAt","SessionId","CollaborateurId","ProofId","certifsId","fincourseId";
Executing (default): SELECT "Cours".* FROM (SELECT "Cours"."id", "Cours"."nom" FROM "Cours" AS "Cours" WHERE ("Cours"."deletedAt" IS NULL) AND ( SELECT "CourId" FROM "Sessions" AS "Sessions" WHERE (("Sessions"."deletedAt" IS NULL AND "Sessions"."id" = 4) AND "Sessions"."CourId" = "Cours"."id") LIMIT 1 ) IS NOT NULL LIMIT 1) AS "Cours" INNER JOIN "Sessions" AS "Sessions" ON "Cours"."id" = "Sessions"."CourId" AND ("Sessions"."deletedAt" IS NULL AND "Sessions"."id" = 4);
Executing (default): SELECT "id", "status", "createdAt", "updatedAt", "deletedAt", "CollaborateurId", "CourId" FROM "Requests" AS "Request" WHERE ("Request"."deletedAt" IS NULL AND ("Request"."CourId" = 5 AND "Request"."CollaborateurId" = 13)) LIMIT 1;
Executing (default): UPDATE "Requests" SET "status"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."id" = 13);
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND ("Collaborateur"."SocieteId" = 8 AND "Collaborateur"."admin" = true)) LIMIT 1;
Executing (default): SELECT "entity_type_id" FROM "Notifications_Entities" AS "Notifications_Entity" WHERE ("Notifications_Entity"."deletedAt" IS NULL AND "Notifications_Entity"."description" = 'has accepted your request to enroll') LIMIT 1;
Executing (default): INSERT INTO "Notification_changes" ("id","createdAt","updatedAt","emeteurId","recepteurId") VALUES (DEFAULT,$1,$2,$3,$4) RETURNING "id","createdAt","updatedAt","deletedAt","emeteurId","recepteurId";
Executing (default): INSERT INTO "Notifications_objects" ("id","read","createdAt","updatedAt","NotificationChangeId","NotificationsEntityEntityTypeId","RequestId") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING "id","read","createdAt","updatedAt","deletedAt","NotificationChangeId","NotificationsEntityEntityTypeId","ProofId","VoucherId","RequestId","SessionId","ProviderId";
POST /api/collab/addsession 200 36 - 189.839 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Session"."id", "Session"."nom", "Session"."datedebut", "Session"."datefin", "Session"."statut", "Session"."createdAt", "Session"."updatedAt", "Session"."deletedAt", "Session"."CourId", "Session"."SocieteId", count("Session_Collabs->Collaborateur"."id") AS "collabs", count("Session_Collabs->certifs"."id") AS "collabs_fin", "Cour"."id" AS "Cour.id", "Cour"."image" AS "Cour.image", "Cour"."nom" AS "Cour.nom", "Cour->Provider"."id" AS "Cour.Provider.id", "Cour->Provider"."nom" AS "Cour.Provider.nom" FROM "Sessions" AS "Session" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" LEFT OUTER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' INNER JOIN "Collaborateurs" AS "Session_Collabs->Collaborateur" ON "Session_Collabs"."CollaborateurId" = "Session_Collabs->Collaborateur"."id" AND ("Session_Collabs->Collaborateur"."deletedAt" IS NULL AND ("Session_Collabs->Collaborateur"."admin" = false AND "Session_Collabs->Collaborateur"."instructor" = false)) ) ON "Session"."id" = "Session_Collabs"."SessionId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Cours" AS "Cour" ON "Session"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Cour->Provider" ON "Cour"."ProviderId" = "Cour->Provider"."id" AND ("Cour->Provider"."deletedAt" IS NULL) WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8) GROUP BY "Session"."id", "Cour"."id", "Cour->Provider"."id";
GET /api/session/browse 200 1114 - 12.433 ms
POST /api/notifs/browsesoc 200 2 - 22.358 ms
Executing (default): SELECT "Provider"."id", "Provider"."nom", "Provider"."image", "Provider"."createdAt", "Provider"."updatedAt", "Provider"."deletedAt", count("Cours"."id") AS "course_num" FROM "Providers" AS "Provider" LEFT OUTER JOIN "Cours" AS "Cours" ON "Provider"."id" = "Cours"."ProviderId" AND ("Cours"."deletedAt" IS NULL) WHERE ("Provider"."deletedAt" IS NULL) GROUP BY "Provider"."id";
GET /api/provider/browse 304 - - 3.251 ms
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
Executing (default): CREATE EXTENSION IF NOT EXISTS pg_trgm
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Societes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Societes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Societes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "name" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Societes"  ADD UNIQUE ("name");ALTER TABLE "Societes" ALTER COLUMN "name" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Societes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Departements'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Departements' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Departements' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "ssss" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" DROP CONSTRAINT "Departements_SocieteId_fkey"
Executing (default): ALTER TABLE "Departements"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Departements' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Users" ALTER COLUMN "username" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "username" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("username");ALTER TABLE "Users" ALTER COLUMN "username" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "password" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "password" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "password" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Users" ALTER COLUMN "email" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("email");ALTER TABLE "Users" ALTER COLUMN "email" TYPE VARCHAR(255) ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Collaborateurs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Collaborateurs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Collaborateurs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" SET DEFAULT false;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_DepartementId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("DepartementId") REFERENCES "Departements" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_SocieteId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_UserId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Collaborateurs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Providers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Providers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Providers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Providers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Cours'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Cours' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Cours' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "description" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" DROP CONSTRAINT "Cours_ProviderId_fkey"
Executing (default): ALTER TABLE "Cours"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Cours' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Requests'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Requests' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Requests' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Requests" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CourId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Requests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Sessions'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Sessions' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Sessions' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_CourId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_SocieteId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Sessions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Proofs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Proofs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Proofs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Proofs" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "file" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "file" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "file" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "name" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "name" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "size" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "size" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "size" TYPE INTEGER;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Proofs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Session_Collabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Session_Collabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Session_Collabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET DEFAULT 0;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" TYPE INTEGER;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_SessionId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_ProofId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_certifsId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_fincourseId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("certifsId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("fincourseId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Session_Collabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Vouchers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Vouchers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Vouchers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "code" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SessionCollabId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SessionCollabId") REFERENCES "Session_Collabs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_ProviderId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SocieteId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Vouchers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenges'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenges' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenges' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "prix" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "prix" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "prix" TYPE INTEGER;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" DROP CONSTRAINT "Challenges_SocieteId_fkey"
Executing (default): ALTER TABLE "Challenges"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenges' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeCollabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeCollabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeCollabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" TYPE INTEGER;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeCollabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Quota'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Quota' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Quota' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "quota" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "quota" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "quota" TYPE INTEGER;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_SocieteId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_ProviderId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Quota' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SuperAdmins'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'SuperAdmins' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'SuperAdmins' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" DROP CONSTRAINT "SuperAdmins_UserId_fkey"
Executing (default): ALTER TABLE "SuperAdmins"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SuperAdmins' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_Entities'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_Entities' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_Entities' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_Entities' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notification_changes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notification_changes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notification_changes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_emeteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_recepteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("emeteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("recepteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notification_changes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_objects'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_objects' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_objects' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "read" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" SET DEFAULT false;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationChangeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationChangeId") REFERENCES "Notification_changes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationsEntityEntityTypeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationsEntityEntityTypeId") REFERENCES "Notifications_Entities" ("entity_type_id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProofId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_VoucherId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("VoucherId") REFERENCES "Vouchers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_RequestId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("RequestId") REFERENCES "Requests" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_SessionId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProviderId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_objects' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeSession'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeSession' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeSession' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeSession' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenge_Dept'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenge_Dept' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenge_Dept' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenge_Dept' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 4.166 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 94.041 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
GET /api/login/getimage 200 68 - 21.978 ms
POST /api/notifs/browsesoc 200 2 - 63.477 ms
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/dashboard/soccollab 200 1376 - 9.761 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 5.061 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 17.177 ms
POST /api/dashboard/soccards 200 11 - 4.587 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 4.864 ms
POST /api/dashboard/socquota 200 100 - 4.139 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 16:48:20 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 13.015 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 4.973 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.854 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.503 ms
GET /api/media/1661860075252dog.png 304 - - 0.396 ms
GET /api/null 404 147 - 1.432 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 1.297 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Cours"."id", "Cours"."nom", "Cours"."description", "Cours"."image", "Cours"."createdAt", "Cours"."updatedAt", "Cours"."deletedAt", "Cours"."ProviderId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider->Quota"."id" AS "Provider.Quota.id", "Provider->Quota"."quota" AS "Provider.Quota.quota", "Provider->Quota"."createdAt" AS "Provider.Quota.createdAt", "Provider->Quota"."updatedAt" AS "Provider.Quota.updatedAt", "Provider->Quota"."deletedAt" AS "Provider.Quota.deletedAt", "Provider->Quota"."SocieteId" AS "Provider.Quota.SocieteId", "Provider->Quota"."ProviderId" AS "Provider.Quota.ProviderId" FROM "Cours" AS "Cours" INNER JOIN "Providers" AS "Provider" ON "Cours"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Quota" AS "Provider->Quota" ON "Provider"."id" = "Provider->Quota"."ProviderId" AND ("Provider->Quota"."deletedAt" IS NULL AND "Provider->Quota"."SocieteId" = 8) WHERE ("Cours"."deletedAt" IS NULL);
POST /api/notifs/browsesoc 200 2 - 96.637 ms
Executing (default): SELECT "Provider"."id", "Provider"."nom", "Provider"."image", "Provider"."createdAt", "Provider"."updatedAt", "Provider"."deletedAt", count("Cours"."id") AS "course_num" FROM "Providers" AS "Provider" LEFT OUTER JOIN "Cours" AS "Cours" ON "Provider"."id" = "Cours"."ProviderId" AND ("Cours"."deletedAt" IS NULL) WHERE ("Provider"."deletedAt" IS NULL) GROUP BY "Provider"."id";
GET /api/cours/browsesoc 200 2196 - 55.862 ms
GET /api/provider/browse 304 - - 50.477 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.520 ms
GET /api/media/1661560854866Cloud-Infrastructure.jpeg 304 - - 0.385 ms
GET /api/media/1661561070151Design%20Thinking.jpeg 304 - - 0.381 ms
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.446 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Request"."id", "Request"."status", "Request"."createdAt", "Request"."updatedAt", "Request"."deletedAt", "Request"."CollaborateurId", "Request"."CourId", "Cour"."id" AS "Cour.id", "Cour"."nom" AS "Cour.nom", "Collaborateur"."id" AS "Collaborateur.id", "Collaborateur"."nom" AS "Collaborateur.nom", "Collaborateur"."prenom" AS "Collaborateur.prenom", "Collaborateur"."image" AS "Collaborateur.image", "Collaborateur"."email_institu" AS "Collaborateur.email_institu", "Collaborateur"."admin" AS "Collaborateur.admin", "Collaborateur"."instructor" AS "Collaborateur.instructor", "Collaborateur"."changedpass" AS "Collaborateur.changedpass", "Collaborateur"."createdAt" AS "Collaborateur.createdAt", "Collaborateur"."updatedAt" AS "Collaborateur.updatedAt", "Collaborateur"."deletedAt" AS "Collaborateur.deletedAt", "Collaborateur"."DepartementId" AS "Collaborateur.DepartementId", "Collaborateur"."SocieteId" AS "Collaborateur.SocieteId", "Collaborateur"."UserId" AS "Collaborateur.UserId" FROM "Requests" AS "Request" INNER JOIN "Cours" AS "Cour" ON "Request"."CourId" = "Cour"."id" AND ("Cour"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Collaborateur" ON "Request"."CollaborateurId" = "Collaborateur"."id" AND ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) WHERE ("Request"."deletedAt" IS NULL AND "Request"."status" = 'pending');
POST /api/notifs/browsesoc 200 2 - 100.011 ms
GET /api/societe/browserequests 200 2 - 93.823 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 0.688 ms
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 52.443 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.381 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 15.064 ms
POST /api/dashboard/soccollab 200 1376 - 7.023 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 39.025 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 3.166 ms
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.067 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 1.808 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 2.749 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 16:49:33 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 7.064 ms
GET /api/null 404 147 - 0.290 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 200 509706 - 2.230 ms
GET /api/media/1661860075252dog.png 200 120474 - 0.818 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.587 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 200 45686 - 0.617 ms
GET /api/media/1661560102989huawei-logo.png 200 8227 - 0.735 ms
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
Executing (default): CREATE EXTENSION IF NOT EXISTS pg_trgm
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Societes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Societes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Societes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "name" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Societes"  ADD UNIQUE ("name");ALTER TABLE "Societes" ALTER COLUMN "name" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Societes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Societes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Departements'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Departements' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Departements' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "ssss" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "ssss" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Departements" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Departements" DROP CONSTRAINT "Departements_SocieteId_fkey"
Executing (default): ALTER TABLE "Departements"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Departements' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Users' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Users" ALTER COLUMN "username" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "username" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("username");ALTER TABLE "Users" ALTER COLUMN "username" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "password" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "password" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "password" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Users" ALTER COLUMN "email" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("email");ALTER TABLE "Users" ALTER COLUMN "email" TYPE VARCHAR(255) ;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Collaborateurs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Collaborateurs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Collaborateurs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "email_institu" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "admin" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "instructor" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" SET DEFAULT false;ALTER TABLE "Collaborateurs" ALTER COLUMN "changedpass" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Collaborateurs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_DepartementId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("DepartementId") REFERENCES "Departements" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_SocieteId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Collaborateurs" DROP CONSTRAINT "Collaborateurs_UserId_fkey"
Executing (default): ALTER TABLE "Collaborateurs"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Collaborateurs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Providers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Providers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Providers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Providers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Providers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Cours'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Cours' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Cours' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "description" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Cours" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Cours" DROP CONSTRAINT "Cours_ProviderId_fkey"
Executing (default): ALTER TABLE "Cours"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Cours' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Requests'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Requests' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Requests' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Requests" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Requests" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Requests" DROP CONSTRAINT "Requests_CourId_fkey"
Executing (default): ALTER TABLE "Requests"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Requests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Sessions'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Sessions' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Sessions' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Sessions" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_CourId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("CourId") REFERENCES "Cours" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Sessions" DROP CONSTRAINT "Sessions_SocieteId_fkey"
Executing (default): ALTER TABLE "Sessions"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Sessions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Proofs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Proofs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Proofs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "status" SET DEFAULT 'pending';ALTER TABLE "Proofs" ALTER COLUMN "status" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "file" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "file" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "file" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "name" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "name" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "mimetype" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "size" DROP NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "size" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "size" TYPE INTEGER;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Proofs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Proofs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Session_Collabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Session_Collabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Session_Collabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" SET DEFAULT 0;ALTER TABLE "Session_Collabs" ALTER COLUMN "status" TYPE INTEGER;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Session_Collabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_SessionId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_CollaborateurId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("CollaborateurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_ProofId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_certifsId_fkey"
Executing (default): ALTER TABLE "Session_Collabs" DROP CONSTRAINT "Session_Collabs_fincourseId_fkey"
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("certifsId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Session_Collabs"  ADD FOREIGN KEY ("fincourseId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Session_Collabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Vouchers'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Vouchers' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Vouchers' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "code" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "code" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Vouchers" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SessionCollabId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SessionCollabId") REFERENCES "Session_Collabs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_ProviderId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Vouchers" DROP CONSTRAINT "Vouchers_SocieteId_fkey"
Executing (default): ALTER TABLE "Vouchers"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Vouchers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenges'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenges' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenges' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "nom" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "prix" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "prix" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "prix" TYPE INTEGER;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Challenges" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenges" DROP CONSTRAINT "Challenges_SocieteId_fkey"
Executing (default): ALTER TABLE "Challenges"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenges' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeCollabs'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeCollabs' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeCollabs' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "statut" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datedebut" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "datefin" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "coursefini" TYPE INTEGER;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "ChallengeCollabs" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeCollabs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Quota'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Quota' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Quota' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "quota" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "quota" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "quota" TYPE INTEGER;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Quota" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_SocieteId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("SocieteId") REFERENCES "Societes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Quota" DROP CONSTRAINT "Quota_ProviderId_fkey"
Executing (default): ALTER TABLE "Quota"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Quota' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SuperAdmins'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'SuperAdmins' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'SuperAdmins' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "nom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "prenom" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "SuperAdmins" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "SuperAdmins" DROP CONSTRAINT "SuperAdmins_UserId_fkey"
Executing (default): ALTER TABLE "SuperAdmins"  ADD FOREIGN KEY ("UserId") REFERENCES "Users" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SuperAdmins' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_Entities'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_Entities' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_Entities' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "entity" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_Entities" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_Entities' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notification_changes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notification_changes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notification_changes' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notification_changes" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_emeteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes" DROP CONSTRAINT "Notification_changes_recepteurId_fkey"
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("emeteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notification_changes"  ADD FOREIGN KEY ("recepteurId") REFERENCES "Collaborateurs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notification_changes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Notifications_objects'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Notifications_objects' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Notifications_objects' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "read" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" SET DEFAULT false;ALTER TABLE "Notifications_objects" ALTER COLUMN "read" TYPE BOOLEAN;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP NOT NULL;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" DROP DEFAULT;ALTER TABLE "Notifications_objects" ALTER COLUMN "deletedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationChangeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationChangeId") REFERENCES "Notification_changes" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_NotificationsEntityEntityTypeId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("NotificationsEntityEntityTypeId") REFERENCES "Notifications_Entities" ("entity_type_id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProofId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProofId") REFERENCES "Proofs" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_VoucherId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("VoucherId") REFERENCES "Vouchers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_RequestId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("RequestId") REFERENCES "Requests" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_SessionId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("SessionId") REFERENCES "Sessions" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): ALTER TABLE "Notifications_objects" DROP CONSTRAINT "Notifications_objects_ProviderId_fkey"
Executing (default): ALTER TABLE "Notifications_objects"  ADD FOREIGN KEY ("ProviderId") REFERENCES "Providers" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Notifications_objects' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ChallengeSession'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ChallengeSession' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ChallengeSession' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ChallengeSession" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ChallengeSession' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Challenge_Dept'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Challenge_Dept' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Challenge_Dept' AND tc.table_catalog = 'ampresta'
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "Challenge_Dept" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Challenge_Dept' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 56.421 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.273 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.185 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 19.028 ms
POST /api/dashboard/soccollab 200 1376 - 10.761 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 4.945 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 13.516 ms
POST /api/dashboard/soccards 200 11 - 3.334 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.405 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 3.223 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 17:01:15 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 9.938 ms
GET /api/null 404 147 - 1.918 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 200 509706 - 3.744 ms
GET /api/media/1661860075252dog.png 200 120474 - 0.894 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 1.510 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 200 45686 - 0.683 ms
GET /api/media/1661560102989huawei-logo.png 200 8227 - 0.593 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 0.581 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 78.397 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.262 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 77.089 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/dashboard/soccollab 200 1376 - 119.034 ms
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 119.181 ms
POST /api/dashboard/soccards 200 11 - 57.508 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 60.413 ms
POST /api/dashboard/soccards 200 11 - 3.842 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
POST /api/dashboard/socquota 200 100 - 6.961 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 2.324 ms
Tue Aug 30 2022 17:02:25 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 11.993 ms
GET /api/null 404 147 - 0.304 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.344 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.510 ms
GET /api/media/1661860075252dog.png 304 - - 0.579 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.473 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.275 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 54.464 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.635 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/notifs/browsesoc 200 2 - 14.173 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/soccollab 200 1376 - 48.059 ms
POST /api/dashboard/socquota 200 100 - 6.272 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.291 ms
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 3.309 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.140 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 3.031 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 17:02:43 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 7.423 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 1.734 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.372 ms
GET /api/media/1661860075252dog.png 304 - - 0.349 ms
GET /api/null 404 147 - 0.389 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.583 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.360 ms
Executing (default): SELECT "id", "username", "password", "email", "createdAt", "updatedAt", "deletedAt" FROM "Users" AS "User" WHERE ("User"."deletedAt" IS NULL AND "User"."id" = 11);
[44mPAYLOAD[0m
Executing (default): SELECT "id", "nom", "prenom", "image", "email_institu", "admin", "instructor", "changedpass", "createdAt", "updatedAt", "deletedAt", "DepartementId", "SocieteId", "UserId" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."UserId" = 11) LIMIT 1;
true
GET /api/login/refreshtoken 200 271 - 48.972 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.422 ms
[36mLOG:[0m
8
Executing (default): SELECT "id", "name", "image", "createdAt", "updatedAt", "deletedAt" FROM "Societes" AS "Societe" WHERE ("Societe"."deletedAt" IS NULL AND "Societe"."id" = 8);
GET /api/login/getimage 200 68 - 6.456 ms
Executing (default): SELECT "Notifications_object"."id", "Notifications_object"."read", "Notification_change"."id" AS "Notification_change.id", "Notification_change->emetteur"."id" AS "Notification_change.emetteur.id", "Notification_change->emetteur"."nom" AS "Notification_change.emetteur.nom", "Notification_change->emetteur"."prenom" AS "Notification_change.emetteur.prenom", "Notification_change->emetteur"."admin" AS "Notification_change.emetteur.admin", "Notification_change->emetteur"."SocieteId" AS "Notification_change.emetteur.SocieteId", "Notification_change->emetteur"."UserId" AS "Notification_change.emetteur.UserId", "Notification_change->emetteur"."image" AS "Notification_change.emetteur.image", "Notification_change->recepteur"."id" AS "Notification_change.recepteur.id", "Notification_change->recepteur"."nom" AS "Notification_change.recepteur.nom", "Notification_change->recepteur"."prenom" AS "Notification_change.recepteur.prenom", "Notification_change->recepteur"."admin" AS "Notification_change.recepteur.admin", "Notification_change->recepteur"."SocieteId" AS "Notification_change.recepteur.SocieteId", "Notification_change->recepteur"."UserId" AS "Notification_change.recepteur.UserId", "Notification_change->recepteur"."image" AS "Notification_change.recepteur.image", "Notifications_Entity"."entity_type_id" AS "Notifications_Entity.entity_type_id", "Notifications_Entity"."entity" AS "Notifications_Entity.entity", "Notifications_Entity"."description" AS "Notifications_Entity.description", "Session"."id" AS "Session.id", "Session"."nom" AS "Session.nom", "Session"."datedebut" AS "Session.datedebut", "Session"."datefin" AS "Session.datefin", "Session"."statut" AS "Session.statut", "Session"."createdAt" AS "Session.createdAt", "Session"."updatedAt" AS "Session.updatedAt", "Session"."deletedAt" AS "Session.deletedAt", "Session"."CourId" AS "Session.CourId", "Session"."SocieteId" AS "Session.SocieteId", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image", "Voucher"."id" AS "Voucher.id", "Voucher"."code" AS "Voucher.code", "Voucher"."createdAt" AS "Voucher.createdAt", "Voucher"."updatedAt" AS "Voucher.updatedAt", "Voucher"."deletedAt" AS "Voucher.deletedAt", "Voucher"."SessionCollabId" AS "Voucher.SessionCollabId", "Voucher"."ProviderId" AS "Voucher.ProviderId", "Voucher"."SocieteId" AS "Voucher.SocieteId", "Proof"."id" AS "Proof.id", "Proof"."status" AS "Proof.status", "Proof"."file" AS "Proof.file", "Proof"."name" AS "Proof.name", "Proof"."mimetype" AS "Proof.mimetype", "Proof"."size" AS "Proof.size", "Proof"."createdAt" AS "Proof.createdAt", "Proof"."updatedAt" AS "Proof.updatedAt", "Request"."id" AS "Request.id", "Request"."status" AS "Request.status", "Request"."createdAt" AS "Request.createdAt", "Request"."updatedAt" AS "Request.updatedAt", "Request"."deletedAt" AS "Request.deletedAt", "Request"."CollaborateurId" AS "Request.CollaborateurId", "Request"."CourId" AS "Request.CourId", "Request->Cour"."id" AS "Request.Cour.id", "Request->Cour"."nom" AS "Request.Cour.nom" FROM "Notifications_objects" AS "Notifications_object" INNER JOIN "Notification_changes" AS "Notification_change" ON "Notifications_object"."NotificationChangeId" = "Notification_change"."id" AND ("Notification_change"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->emetteur" ON "Notification_change"."emeteurId" = "Notification_change->emetteur"."id" AND ("Notification_change->emetteur"."deletedAt" IS NULL) INNER JOIN "Collaborateurs" AS "Notification_change->recepteur" ON "Notification_change"."recepteurId" = "Notification_change->recepteur"."id" AND ("Notification_change->recepteur"."deletedAt" IS NULL AND ("Notification_change->recepteur"."SocieteId" = 8 AND "Notification_change->recepteur"."admin" = true)) LEFT OUTER JOIN "Notifications_Entities" AS "Notifications_Entity" ON "Notifications_object"."NotificationsEntityEntityTypeId" = "Notifications_Entity"."entity_type_id" AND ("Notifications_Entity"."deletedAt" IS NULL) LEFT OUTER JOIN "Sessions" AS "Session" ON "Notifications_object"."SessionId" = "Session"."id" AND ("Session"."deletedAt" IS NULL) LEFT OUTER JOIN "Providers" AS "Provider" ON "Notifications_object"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) LEFT OUTER JOIN "Vouchers" AS "Voucher" ON "Notifications_object"."VoucherId" = "Voucher"."id" AND ("Voucher"."deletedAt" IS NULL) LEFT OUTER JOIN "Proofs" AS "Proof" ON "Notifications_object"."ProofId" = "Proof"."id" LEFT OUTER JOIN "Requests" AS "Request" ON "Notifications_object"."RequestId" = "Request"."id" AND ("Request"."deletedAt" IS NULL) LEFT OUTER JOIN "Cours" AS "Request->Cour" ON "Request"."CourId" = "Request->Cour"."id" AND ("Request->Cour"."deletedAt" IS NULL) WHERE ("Notifications_object"."deletedAt" IS NULL AND "Notifications_object"."read" = false);
POST /api/notifs/browsesoc 200 2 - 13.887 ms
Executing (default): SELECT "Collaborateur"."id", "Collaborateur"."nom", "Collaborateur"."prenom", "Collaborateur"."image", "Collaborateur"."email_institu", "Collaborateur"."admin", "Collaborateur"."instructor", "Collaborateur"."changedpass", "Collaborateur"."createdAt", "Collaborateur"."updatedAt", "Collaborateur"."deletedAt", "Collaborateur"."DepartementId", "Collaborateur"."SocieteId", "Collaborateur"."UserId", count("Session_Collabs->certifs"."id") AS "certifs_count" FROM "Collaborateurs" AS "Collaborateur" LEFT OUTER JOIN ( "Session_Collabs" AS "Session_Collabs" INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' ) ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "Collaborateur"."id";
POST /api/dashboard/soccollab 200 1376 - 4.408 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 2.687 ms
Executing (default): SELECT count(*) AS "count" FROM "Sessions" AS "Session" WHERE ("Session"."deletedAt" IS NULL AND "Session"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.921 ms
Executing (default): SELECT count(*) AS "count" FROM "Challenges" AS "Challenge" WHERE ("Challenge"."deletedAt" IS NULL AND "Challenge"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 2.717 ms
Executing (default): SELECT "Quota"."id", "Quota"."quota", "Provider"."id" AS "Provider.id", "Provider"."nom" AS "Provider.nom", "Provider"."image" AS "Provider.image" FROM "Quota" AS "Quota" LEFT OUTER JOIN "Providers" AS "Provider" ON "Quota"."ProviderId" = "Provider"."id" AND ("Provider"."deletedAt" IS NULL) WHERE ("Quota"."deletedAt" IS NULL AND "Quota"."SocieteId" = 8);
POST /api/dashboard/socquota 200 100 - 4.309 ms
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Collaborateur"."createdAt") AS "month", extract(year FROM "Collaborateur"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
Tue Aug 30 2022 17:09:46 GMT+0100 (UTC+02:00)
heeey 0 [ { count: '4', month: '8', year: '2022' } ]
2022 8
0 { count: '4', month: '8', year: '2022' } 8 2022
inside [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
] 4 8
result 0 [
  '0', '0', '0', '0',
  '0', '0', '0', '0',
  4
]
Executing (default): SELECT count("Collaborateur"."id") AS "count", extract(month FROM "Session_Collabs->certifs"."createdAt") AS "month", extract(year FROM "Session_Collabs->certifs"."createdAt") AS "year" FROM "Collaborateurs" AS "Collaborateur" INNER JOIN "Session_Collabs" AS "Session_Collabs" ON "Collaborateur"."id" = "Session_Collabs"."CollaborateurId" AND ("Session_Collabs"."deletedAt" IS NULL) INNER JOIN "Proofs" AS "Session_Collabs->certifs" ON "Session_Collabs"."certifsId" = "Session_Collabs->certifs"."id" AND "Session_Collabs->certifs"."status" = 'accepted' WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8) GROUP BY "month", "year" ORDER BY year, month;
result 1 [
  '0', '0', '0',
  '0', '0', '0',
  '0', '0', '0'
]
POST /api/dashboard/socgraph 200 100 - 7.131 ms
GET /api/null 404 147 - 0.311 ms
Executing (default): SELECT count(*) AS "count" FROM "Collaborateurs" AS "Collaborateur" WHERE ("Collaborateur"."deletedAt" IS NULL AND "Collaborateur"."SocieteId" = 8);
POST /api/dashboard/soccards 200 11 - 3.225 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 200 509706 - 1.001 ms
GET /api/media/1661860075252dog.png 200 120474 - 2.851 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.517 ms
GET /api/media/1661560102989huawei-logo.png 200 8227 - 0.617 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 200 45686 - 0.768 ms
GET /api/null 404 147 - 0.431 ms
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
All models were synchronized successfully.
Connection has been established successfully.
Server listening on 8000...
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 278 - 19.982 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.408 ms
GET /api/login/getimage 200 38 - 0.978 ms
POST /api/notifs/browsecollab 200 9376 - 24.086 ms
Request
GET /api/dashboard/collab 200 66 - 9.645 ms
a connection from { type: 'join', username: 14 }
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 279 - 6.420 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 0.647 ms
[36mLOG:[0m
8
GET /api/login/getimage 200 68 - 3.992 ms
POST /api/notifs/browsesoc 200 1231 - 11.002 ms
POST /api/dashboard/soccollab 200 1376 - 4.905 ms
POST /api/dashboard/socquota 200 100 - 3.386 ms
POST /api/dashboard/soccards 200 11 - 14.283 ms
POST /api/dashboard/soccards 200 11 - 4.335 ms
POST /api/dashboard/soccards 200 11 - 1.765 ms
a connection from { type: 'join', username: 11 }
POST /api/dashboard/socquota 200 100 - 2.273 ms
POST /api/dashboard/socgraph 200 100 - 5.544 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 1.953 ms
GET /api/null 404 147 - 1.742 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.543 ms
GET /api/media/1661860075252dog.png 304 - - 0.463 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 1.294 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.342 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.709 ms
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 278 - 59.490 ms
GET /api/login/getimage 200 38 - 0.525 ms
Request
POST /api/notifs/browsecollab 200 9376 - 52.155 ms
GET /api/dashboard/collab 304 - - 57.842 ms
a connection from { type: 'join', username: 14 }
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 279 - 4.654 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 0.378 ms
[36mLOG:[0m
8
GET /api/login/getimage 200 68 - 6.239 ms
POST /api/notifs/browsesoc 200 1231 - 18.977 ms
POST /api/dashboard/soccollab 200 1376 - 7.175 ms
POST /api/dashboard/socquota 200 100 - 3.422 ms
POST /api/dashboard/soccards 200 11 - 1.955 ms
POST /api/dashboard/soccards 200 11 - 1.768 ms
POST /api/dashboard/soccards 200 11 - 1.722 ms
a connection from { type: 'join', username: 11 }
POST /api/dashboard/socquota 200 100 - 1.961 ms
POST /api/dashboard/socgraph 200 100 - 4.021 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.397 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.361 ms
GET /api/media/1661860075252dog.png 304 - - 0.441 ms
GET /api/null 404 147 - 0.306 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.619 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.361 ms
POST /api/notifs/browsesoc 200 1231 - 23.457 ms
POST /api/notifs/readonenotif 200 15 - 17.445 ms
GET /api/societe/browserequests 200 2 - 3.499 ms
a connection from { type: 'join', username: 11 }
POST /api/notifs/browsecollab 200 9376 - 18.753 ms
GET /api/collab/requests 200 4238 - 13.160 ms
a connection from { type: 'join', username: 14 }
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.644 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.388 ms
POST /api/notifs/browsecollab 200 9376 - 17.998 ms
GET /api/cours/catalogue 304 - - 24.167 ms
GET /api/provider/browse 304 - - 6.987 ms
a connection from { type: 'join', username: 14 }
POST /api/notifs/browsecollab 200 9376 - 16.280 ms
POST /api/cours/detail 200 650 - 11.165 ms
a connection from { type: 'join', username: 14 }
GET /api/media/1661560102989huawei-logo.png 304 - - 0.403 ms
ws= 10 11
sent
POST /api/collab/sendrequest 200 54 - 31.038 ms
POST /api/notifs/browsesoc 200 1231 - 12.159 ms
POST /api/notifs/readonenotif 200 15 - 4.913 ms
POST /api/notifs/readonenotif 200 15 - 4.438 ms
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 279 - 7.324 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.371 ms
[36mLOG:[0m
8
GET /api/login/getimage 200 68 - 14.714 ms
POST /api/notifs/browsesoc 200 2 - 11.759 ms
POST /api/dashboard/soccollab 200 1376 - 3.378 ms
POST /api/dashboard/socquota 200 100 - 4.626 ms
POST /api/dashboard/soccards 200 11 - 8.858 ms
POST /api/dashboard/soccards 200 11 - 8.133 ms
POST /api/dashboard/soccards 200 11 - 9.016 ms
POST /api/dashboard/socquota 200 100 - 9.088 ms
POST /api/dashboard/socgraph 200 100 - 16.807 ms
a connection from { type: 'join', username: 11 }
GET /api/media/1661560102989huawei-logo.png 304 - - 0.543 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.375 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.497 ms
GET /api/media/1661860075252dog.png 304 - - 0.361 ms
GET /api/null 404 147 - 0.320 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.521 ms
POST /api/notifs/browsesoc 200 2 - 11.217 ms
GET /api/provider/browse 304 - - 4.765 ms
GET /api/cours/browsesoc 304 - - 15.855 ms
a connection from { type: 'join', username: 11 }
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.391 ms
GET /api/media/1661560854866Cloud-Infrastructure.jpeg 304 - - 0.320 ms
GET /api/media/1661561070151Design%20Thinking.jpeg 304 - - 0.331 ms
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.469 ms
POST /api/notifs/browsesoc 200 2 - 10.002 ms
GET /api/societe/browserequests 200 528 - 5.764 ms
a connection from { type: 'join', username: 11 }
ws= 14
POST /api/collab/refuse 200 31 - 27.380 ms
POST /api/notifs/browsecollab 200 9999 - 13.841 ms
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 278 - 5.087 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.805 ms
GET /api/login/getimage 200 38 - 0.462 ms
POST /api/notifs/browsecollab 200 9999 - 14.223 ms
Request
GET /api/dashboard/collab 304 - - 6.797 ms
a connection from { type: 'join', username: 14 }
POST /api/notifs/browsecollab 200 9999 - 14.950 ms
GET /api/cours/catalogue 304 - - 8.229 ms
GET /api/provider/browse 304 - - 7.786 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.410 ms
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.364 ms
a connection from { type: 'join', username: 14 }
POST /api/notifs/browsecollab 200 9999 - 36.120 ms
POST /api/cours/detail 200 650 - 30.621 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.434 ms
a connection from { type: 'join', username: 14 }
ws= 10 11
sent
POST /api/collab/sendrequest 200 54 - 18.781 ms
POST /api/notifs/browsesoc 200 616 - 8.979 ms
POST /api/notifs/readonenotif 200 15 - 4.240 ms
POST /api/notifs/readonenotif 200 15 - 4.876 ms
POST /api/notifs/readonenotif 200 15 - 1.835 ms
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 279 - 5.573 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 1.620 ms
[36mLOG:[0m
8
GET /api/login/getimage 200 68 - 7.775 ms
POST /api/notifs/browsesoc 200 2 - 9.606 ms
POST /api/dashboard/soccollab 200 1376 - 6.207 ms
POST /api/dashboard/socquota 200 100 - 35.050 ms
POST /api/dashboard/soccards 200 11 - 1.528 ms
POST /api/dashboard/socquota 200 100 - 2.207 ms
POST /api/dashboard/soccards 200 11 - 3.853 ms
POST /api/dashboard/soccards 200 11 - 3.398 ms
POST /api/dashboard/socgraph 200 100 - 4.660 ms
a connection from { type: 'join', username: 11 }
GET /api/media/1661560102989huawei-logo.png 304 - - 0.348 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.329 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.311 ms
GET /api/media/1661860075252dog.png 304 - - 0.306 ms
GET /api/null 404 147 - 0.407 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.432 ms
POST /api/notifs/browsesoc 200 2 - 10.503 ms
GET /api/societe/browserequests 200 528 - 4.851 ms
a connection from { type: 'join', username: 11 }
POST /api/session/browsesoc 200 1850 - 4.721 ms
GET /api/media/1661560826647HCIA-5G.jpg 304 - - 0.373 ms
ws= 14
POST /api/collab/addsession 200 36 - 132.469 ms
POST /api/notifs/browsecollab 200 10624 - 11.202 ms
POST /api/notifs/browsesoc 200 2 - 6.786 ms
GET /api/session/browse 200 1114 - 5.477 ms
GET /api/provider/browse 304 - - 2.717 ms
a connection from { type: 'join', username: 11 }
GET /api/media/1661561123514HCIA-BigData.jpg 304 - - 0.405 ms
[36mLOG:[0m
Bearer
GET /api/login/getimage 403 9 - 0.514 ms
[44mPAYLOAD[0m
true
GET /api/login/refreshtoken 200 279 - 56.459 ms
[36mLOG:[0m
8
GET /api/login/getimage 200 68 - 29.964 ms
POST /api/notifs/browsesoc 200 2 - 24.144 ms
POST /api/dashboard/soccollab 200 1376 - 5.841 ms
POST /api/dashboard/socquota 200 100 - 3.309 ms
POST /api/dashboard/soccards 200 11 - 1.585 ms
POST /api/dashboard/soccards 200 11 - 1.531 ms
POST /api/dashboard/soccards 200 11 - 1.285 ms
POST /api/dashboard/socquota 200 100 - 1.638 ms
a connection from { type: 'join', username: 11 }
POST /api/dashboard/socgraph 200 100 - 4.383 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.468 ms
GET /api/null 404 147 - 0.481 ms
GET /api/media/16618592571781661788803820SAADOUNE%20V2.jpg 304 - - 0.326 ms
GET /api/media/1661860075252dog.png 304 - - 0.298 ms
GET /api/media/16618616550241661784445453SAADOUNE%20V2.jpg 404 192 - 0.536 ms
GET /api/media/1661560102989huawei-logo.png 304 - - 0.292 ms
GET /api/media/1661641862603undraw_traveling_2vx4.png 304 - - 0.358 ms
